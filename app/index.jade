doctype html
html(class="no-js", lang="en", ng-app="carlipa.nissan.CarSpecAdmin")
  head
  meta(charset="utf-8")
  meta(http-equiv="X-UA-Compatible", content="IE=edge,chrome=1")
  title ngFactory
  meta(name="description", content="Yet another amazing AngularJS app")

  //- Sets initial viewport load and disables zooming
  meta(name="viewport", content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no")
  //- Makes your prototype chrome-less once bookmarked to your phone's home screen
  meta(name="apple-mobile-web-app-capable", content="yes")
  meta(name="apple-mobile-web-app-status-bar-style", content="black-translucent")
  //- Set a shorter title for iOS6 devices when saved to home screen
  meta(name="apple-mobile-web-app-title" content="AngularJS")

  //- Favicon
  link(rel="icon", href="favicon.ico", type="image/x-icon")
  link(rel="shortcut icon", href="favicon.ico", type="image/x-icon")
  //- Author of this application
  link(rel="author" href="https://github.com/mgcrea")

  //- bower:css
  //- endinject
  link(rel="stylesheet" href="bower_components/reveal.js/css/reveal.css")
  link(rel="stylesheet" href="bower_components/highlightjs/styles/monokai.css")
  script(src="bower_components/reveal.js/lib/js/head.min.js")

  //- inject:css
  //- endinject
  //- script(src="scripts/head.min.js")

  body
    .reveal
      //- Any section element inside of this container is displayed as a slide
      .slides

        //- breaks pre
        //- section(data-markdown="data/title.md")

        section
          img(src="images/angular-logo.png")
          h1 ngFactory
          p shiny AngularJS build system powered by Gulp
          aside.notes.
            #[br] - Have you ever noticed that we're all developers and we all - use - differents - workflows ?
            #[br] - Do you like maintaining your grunt and gulp files for your many projects over time ?
            #[br] - We don't, and that's why we settled together to imagine the perfect development workflow companion to help us ship and maintain projects over time.
            #[br] - Today we'd like to present to you ng-factory which is an upgradable development workflow library built on to of Gulp and focused angularJS components and applications.
        section
          h3 Focused on best practices
          p #[i.fa.fa-arrow-right] Developement
          p #[i.fa.fa-arrow-right] Building
          p #[i.fa.fa-arrow-right] Documentation
          p #[i.fa.fa-arrow-right] Publication
          aside.notes.
            #[br] - ng-factory is focused on best practices and covers the whole development lifecycle : Developement, Build, Documentation, and Publication.

        section
          //- section
          //-   h2 #[i.fa.fa-question] Gulp-centric plugin
          //-   aside.notes.
          //-     #[br] - the whole project is built on top of Gulp.
          //-     #[br] - And we really like gulp, because when you're working on your gulpfile, your now learning NodeJS streams, grunt-specific configuration.
          //- section
          //-   h3 Gulp...
          //-   p #[i.fa.fa-github] Is evolving at a very high pace
          //-   p #[i.fa.fa-arrow-right] Upgrading is hard, it takes time
          //-   p #[i.fa.fa-arrow-right] Migrating is risky, it might break
          //-   aside.notes.
          //-     #[br] - In the end you have dozens of projects that are all using their unique subset of gulp tasks, generated at some point in time, and hand-tweaked after that.
          //-     #[br] = And you really can't take the risk of migrating everything, because there is a high probability of breaking your build. And you've got actual work to do on your project!
          section
            h2 #[i.fa.fa-question] What can we do?
            aside.notes.
              #[br] - So where should we start? The main goal is to be more productive, and to maintin a high-quality working worflow.
              #[br] - The key is really to abstract and easily upgrade your workflow in safe way
          section
            p #[i.fa.fa-filter] Reduce your gulpfile scope
            p #[i.fa.fa-star] Keep only what's specific to your app
            aside.notes.
              #[br] - So for us, the first thing to do to address that was to really reduce the size of your Gulpfile.
              #[br] - Abstracting away what was clearly not specific to your application or component.
              #[br] - Indeed gulp is a really new ecosystem, and it does evolve at a very high pace.
              #[br] - Modules get deprecated, with new ones replacing them. Keeping everything really up-to-date can really be time-consuming, even if you’ve started with a good yeoman generator.
              #[br] - And in the end you have dozens of projects that are all using their unique subset of gulp tasks, generated at some point in time, and hand-tweaked after that.
              #[br] - ngFactory really tries to solve this issue...
          section
            p #[i.fa.fa-cogs] To Provide pre-defined tasks
            p #[i.fa.fa-arrow-right] ngFactory relies on reusable channel factories...
            p #[i.fa.fa-arrow-right] ...returning combined transform streams!
            aside.notes.
              #[br] - ... And the first idea we had was to provide generic tasks in an external module that could be required by your gulpFile.
              #[br] - But gulp tasks are quite monolithic and too hard to reuse, at least with Gulp’s current orchestrator.
              #[br] - We needed way more flexibility and had to find something else, and that’s why we came up with: combined transform stream factories, and we called them gulp channels.
          section
            p #[i.fa.fa-arrow-right] DRY Gulp "Channel" example
            pre: code.js.
              return function ChannelFactory() {
                // Returns a combination of transforms streams
                // that can be easily reused in any gulp task
                return require('stream-combiner')(
                  gulpif('**/*.less', less()),
                  gulpif('**/*.sass', sass()),
                  autoprefixer('last 1 version'),
                  gulp.dest(src.tmp)
                );
              };
            aside.notes.
              #[br] - Here is an example of a factory using stream-combiner that returns a reusable series transform streams
              #[br] - What's really great about it, it that we can easily reuse this channel anywhere in our workflow.
              #[br] - For instance, to build your styles, whether it's for your components, application or documention.
              #[br] - Finally, Having these reusable channels really helped us achieve something that's DRY and most importantly easy to maintain!

        section
          section
            h2 #[i.fa.fa-refresh] Documentation &amp; Publication
            aside.notes.
              Generate README.md &amp; Documentation (living)
          section
            h3 Documentation (readme+docs)
            p #[i.fa.fa-arrow-right] ngDoc parser/formatter
            p #[i.fa.fa-arrow-right] markdown
            p #[i.fa.fa-arrow-right] nunjucks
            aside.notes.
              Generate README.md &amp; Documentation
          section
            h3 Publication
            p #[i.fa.fa-arrow-right] dedicated orphan release branches
            p #[i.fa.fa-arrow-right] git tagging auto-triggering releases
            p #[i.fa.fa-arrow-right] making travis the sole publisher

        section
          section
            h3 Merci!
            p(style="line-height:80%") #[i.fa.fa-goole-plus] +Julien Bouquillon
            p(style="line-height:80%") #[i.fa.fa-goole-plus] +Olivier Louvignes
            p(style="line-height:80%") #[i.fa.fa-goole-plus] +Douglas Duteil
            br
            h3 Any questions?

    //- bower:js
    //- endinject
    script(src="bower_components/reveal.js/js/reveal.js")
    script(src="bower_components/reveal.js/plugin/highlight/highlight.js")
    script(src="bower_components/reveal.js/plugin/zoom-js/zoom.js")
    script(src="bower_components/reveal.js/plugin/notes/notes.js")

    //- inject:js
    //- endinject
